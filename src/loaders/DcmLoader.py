import os
import glob
import pydicom
import numpy as np

from tqdm import tqdm
from .Loader import Loader



class DcmLoader(Loader): 
    """ Loads .dcm files that are arranged in a 3D manner (i.e. MRI scans).
    - Includes function to generate local image patches from an image dataset
    generated by this class
    - Can export patches to .png file format
    - Can plot patches / display mask over image / mask
    """
    
    def __init__(self, root, label='image', mask_label='mask', 
                 masked = False, backgrounded = True):
        super().__init__(root, label, mask_label, masked, backgrounded)
    """Loads DCM images.

    Parameters:
        See Loader.py
    
    Notes:
        If with_mask is True:
            - For all folders in root dir, look for 'image' and 'mask' sub-folders
        - Call load_dcms_from_path
        - Store resulting image/mask arrays to related objects of this class
    """
    def load_all(self):
        prev_dir = os.getcwd()
        os.chdir(self.root)
        
        if self.masked:
            images = [f for f in glob.glob(self.root + '/*/image/*.dcm')]
            masks  = [f for f in glob.glob(self.root + '/*/mask/*.dcm')]
        else:
            images = [f for f in glob.glob(self.root + '/*.dcm')]
            
        
        for i in tqdm(range(len(images)), unit=' files'):
            if self.masked:
                mask_file  = masks[i]
                mask  = pydicom.dcmread(mask_file).pixel_array
                self.masks.append(mask)
                
            image_file = pydicom.dcmread(images[i])
            image = image_file.pixel_array
            
            # If image is a negative (PhotometricInterpretation = MONOCHROME1), then invert
            # it to appear as a positive
            if image_file.data_element('PhotometricInterpretation').value == 'MONOCHROME1':
                image = np.invert(image)
                
            # Normalize the image
            image = image.astype(np.float64)
            image *= 1.0 / image.max()
            self.images.append(image)
            
        os.chdir(prev_dir)